#!/bin/sh

# include MENU extension class
source ./menu_ex

# ---------------------------------------------------------------------------------------------------------------------
#
# Demo Example:
#
# Look at 'DEMO.Create' - to see how the demo menus are created
#
# Aliases:
#
#   'dev'  - to display all the demo menus
#   'flip' - to see how .CheckButtonForAll function can be used
#
# ---------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------
# The Demo Menu's Callbacks
# ---------------------------------------------------------------------------------------------------------------------

# [IN] handle - the menu's name/handle
# [IN] name   - the menu's name (if specified)
DEMO.PlCallback() {
    #MENU._separator $1
    echo " PL.$2..."
    echo ' ...'
}

# [IN] handle - the menu's name/handle
# [IN] name   - the item's selected
DEMO.PlLinuxCallback() {
    if [ "$2" != 'Linux' ]; then
        MENU._error "Wrong callback!"
        return
    fi
    #MENU._separator $1
    echo " PL.Linux.Callback..."
    echo ' ...'
}

DEMO.PlQemuCallback() {
    #MENU._separator $1
    echo " PL.$2..."
    echo ' ...'
}

# ---------------------------------------------------------------------------------------------------------------------

DEMO.PlChild1Callback() {
    echo " PL.It..."
    echo ' ...'
}

DEMO.PlChild1RadioCallback() {
    #MENU._separator $1
    echo " PL.SubMenu.$2..."
    echo ' ...'
}

# [IN]      handle - the menu's name/handle
# [IN]      name   - the name of the selected item
# [IN][OPT] state  - {on, off} item's state (check.button type only)
DEMO.PlChild1CheckCallback() {
    #MENU._separator $1
    echo " PL.SubMenu.$2.[$3]..."
    echo ' ...'
}

# ---------------------------------------------------------------------------------------------------------------------

DEMO.PlChild2RadioCallback() {
    #MENU._separator $1
    echo " PL.Extra.$2..."
    echo ' ...'
}

# ---------------------------------------------------------------------------------------------------------------------

DEMO.BuildCallback() {
    #MENU._separator $1
    echo " Build.$2..."
    echo ' ...'
}

DEMO.BuildModeCallback() {
    #MENU._separator $1
    echo " Build.$2..."

    case $2 in
        Debug)
            echo ' ...'
            ;;
        Release)
            echo ' ...'
            ;;
    esac

}

DEMO.BuildGccFlagsCallback() {
    #MENU._separator $1
    echo " PL.$2.state.[$3]..."

    case $2 in
        Pedantic)
            echo ' ...'
            ;;
        Wall)
            echo ' ...'
            ;;
        Werror)
            echo ' ...'
            ;;
        fPIC)
            echo ' ...'
            ;;
        isoC99)
            echo ' ...'
            ;;
    esac

}

# ---------------------------------------------------------------------------------------------------------------------

DEMO.LogsCallback() {
    #MENU._separator $1
    echo " LOGS.$2..."

    case $2 in
        FATAL)
            echo ' ...'
            ;;
        SEVERE)
            echo ' ...'
            ;;
        WARNING)
            echo ' ...'
            ;;
        INFO)
            echo ' ...'
            ;;
        FINE)
            echo ' ...'
            ;;
        FINER)
            echo ' ...'
            ;;
        FINEST)
            echo ' ...'
            ;;
        OFF)
            echo ' ...'
            ;;
    esac
}

# ---------------------------------------------------------------------------------------------------------------------
# The Demo Menu
# ---------------------------------------------------------------------------------------------------------------------

DEMO.Create() {
    # See menu_ex:'Functions and parameters acronims' for 'MENU.Null' explanation
    null='MENU.Null'

    #
    # Demo menu 'PLATFORM'
    #

    # -----------------------------------------------------------------------------------------------------------------
    # Create a menu
    #
    # 1           handle                     - a name/handle of the menu to be used w/ the API
    # 2 [OPT]       |     name               - a displayed name of the menu
    # 3 [OPT]       |      |    alias        - an alias to be created that displays the menu
    # 4 [OPT]       |      |     |  callback - a function to be called when the menu is displayed
    MENU.Create pl_menu PLATFORM PL DEMO.PlCallback
    #MENU.Create pl_menu $null PL MENU.DemoMainMenu
    #MENU.Create pl_menu $null $null MENU.DemoMainMenu
    #MENU.Create pl_menu

    # -----------------------------------------------------------------------------------------------------------------
    # Under the hood 'PL' is just an alias for: 'MENU.Show pl_menu'
    #
    # 1 [OPT]  flag1           - whether to call the main menu's callback
    # 2 [OPT]   |    flag2     - whether to call the selected radio button item's callback
    # 3 [OPT]   |     |   mode - call-mode of all the check button item's callbacks, for modes see documentation for .Show
    # > PL    false false all
    #
    # 'PL' alias usage examples:
    # > PL                 - displays the menu
    # > PL true            - displays the menu + calls the menu's callback
    # > PL false true      - displays the menu + calls the selected radio button item's callback
    # > PL true true       - displays the menu + calls both the selected item and the main menu's callbacks
    # > PL false false all - displays the menu + calls all the radio button item's callbacks
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    # Set the menu's style (replace the default style)
    #
    # 1           handle                                               - a name/handle of the menu to be used w/ the API
    # 2 [OPT]       |    divider                                       - devider to be used w/ .AddDivider ('|' by default)
    # 3 [OPT]       |      |        alignment                          - alignent of the item names (none by default)
    # 4 [OPT]       |      |           |          color                - the color of hightlighted items (green by default)
    # 5 [OPT]       |      |           |            |  symbol1       - the select symbol for the radio button when selected
    # 6 [OPT]       |      |           |            |   |  symbol2 - the check symbol for the check button when checked
    #MENU.SetStyle pl_menu default by.largest.item red 'â—‹' default
    #MENU.SetStyle pl_menu default by.largest.item
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    # Set the extra style of the menu (replace the default style)
    # 1            handle                                                  - a name/handle of the menu to be used w/ the API
    # 2 [OPT]         |     separator.show                                 - {true/false} whether to print the menu's separator (true by default)
    # 3 [OPT]         |       |  separator.symbol                          - separator symbol ('-' by default)
    # 4 [OPT]         |       |    |  name.header                          - menu's name header (' * ' by default)
    # 5 [OPT]         |       |    |    |  name.footer                     - menu's name footer (':' by default)
    # 6 [OPT]         |       |    |    |    | symbol.radio.start          - radio.button opening symbol ('(' by default)
    # 7 [OPT]         |       |    |    |    |   | symbol.radio.end        - radio.button closing symbol (')' by default)
    # 8 [OPT]         |       |    |    |    |   |   | symbol.chk.start    - check.button opening symbol ('[' by default)
    # 9 [OPT]         |       |    |    |    |   |   |   |  symbol.chk.end - check.button closing symbol (']' by default)
    #MENU.SetStyleEx pl_menu true '-' " * " ":" '(' ')' '[' ']'
    #
    # For example:
    #
    #MENU.SetStyleEx pl_menu true '=' " + '" "':" '[[' ']]' '((' '))'
    #MENU.SetStyle pl_menu default by.largest.item cyan 'xx' '***'
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    # Add a radio.button item into the menu
    #
    # 1               handle                    - a name/handle of the menu to be used w/ the API
    # 2                 |    name               - an item's name to be added into the menu
    # 3 [OPT]           |     |    alias        - an alias to be created that triggers the item's callback
    # 4 [OPT]           |     |     |  callback - a function to be called when an item is selected
    MENU.AddRadioButton pl_menu Linux nux DEMO.PlLinuxCallback
    #MENU.AddRadioButton pl_menu Linux $null MENU.DemoPlLinuxCb
    #MENU.AddRadioButton pl_menu Linux
    #
    # In the invocation example #2, there is no alias for item 'Linux', so the only way to call it is by using
    # the .Select command, like so: MENU.Select pl_menu Linux true false true
    # Please, look into .Select command demo to understand all the flags
    #
    # -----------------------------------------------------------------------------------------------------------------
    # Under the hood 'nux' is just an alias for: 'MENU.Select pl_menu Linux true false true'
    #
    # 1 [OPT]  flag1     - whether to call the main menu's callback
    # 2 [OPT]   |   mode - call-mode of the check button callbacks [no (false), all (true), checked, unchecked]
    # > nux    true no
    #
    # 'nux' alias usage examples:
    # > nux          - selects 'Linux' item, displays the 'PLATFORM' menu and triggers the 'Linux' item's callback
    # > nux true     - all the above + triggers the 'PLATFORM' menu's callback
    # > nux true all - all the above + triggers all the check button item's callbacks (if any)
    # -----------------------------------------------------------------------------------------------------------------

    MENU.AddDivider pl_menu
    #MENU.AddLnBreak pl_menu
    MENU.AddLabel pl_menu QEMU:
    MENU.AddRadioButton pl_menu v8 v8 DEMO.PlQemuCallback
    MENU.AddRadioButton pl_menu arm32 arm DEMO.PlQemuCallback
    #MENU.AddDivider pl_menu
    #MENU.AddRadioButton pl_menu "Name w/ space" ace MENU.DemoPlQemuCb

    # -----------------------------------------------------------------------------------------------------------------
    # Select an item of the menu
    #
    #           handle                             - a name/handle of the menu to be used w/ the API
    #             |    name                        - a name of an item to be set as 'selected' in the menu
    #             |     |   show                   -
    #             |     |    |    flag1            -
    #             |     |    |     |    flag2      -
    #             |     |    |     |     |    mode -
    MENU.Select pl_menu v8 false false true no
    # -----------------------------------------------------------------------------------------------------------------

    # -----------------------------------------------------------------------------------------------------------------
    # Create two child menus and add them into the main (parent) PLATFORM menu
    # -----------------------------------------------------------------------------------------------------------------
    MENU.Create pl_child_menu1 $null $null DEMO.PlChild1Callback
    MENU.AddLabel pl_child_menu1 It:
    MENU.AddRadioButton pl_child_menu1 Item1 m1 DEMO.PlChild1RadioCallback
    MENU.AddRadioButton pl_child_menu1 Item2 m2 DEMO.PlChild1RadioCallback
    MENU.AddRadioButton pl_child_menu1 Item3 m3 DEMO.PlChild1RadioCallback
    # -----------------------------------------------------------------------------------------------------------------
    MENU.AddDivider pl_child_menu1
    MENU.AddLabel pl_child_menu1 Mode:
    MENU.AddCheckButton pl_child_menu1 Ps1 s1 DEMO.PlChild1CheckCallback
    MENU.AddCheckButton pl_child_menu1 Nx Nx DEMO.PlChild1CheckCallback
    MENU.Select pl_child_menu1 Item2 false
    MENU.Select pl_child_menu1 Ps1 false
    # -----------------------------------------------------------------------------------------------------------------
    MENU.Create pl_child_menu2
    MENU.AddDivider pl_child_menu2
    MENU.AddLabel pl_child_menu2 Extra:
    MENU.AddRadioButton pl_child_menu2 Sub1 b1 DEMO.PlChild2RadioCallback
    MENU.AddRadioButton pl_child_menu2 Sub2 b2 DEMO.PlChild2RadioCallback
    # -----------------------------------------------------------------------------------------------------------------

    MENU.AddDivider pl_menu
    MENU.AddMenu pl_menu pl_child_menu1
    MENU.AddMenu pl_menu pl_child_menu2

    # -----------------------------------------------------------------------------------------------------------------
    # Show/display the menu
    #
    #           handle                - a name/handle of the menu to be used w/ the API
    #             |   flag1           - whether to call the main menu's callback
    #             |     |  flag2      - whether to call the selected radio button item's callback
    #             |     |    |   mode - call mode of the check button callbacks [no (false), all (true), checked, unchecked]
    #MENU.Show pl_menu true true all

    #
    # mode:
    #  no (false)   - do not call any callback for any check button itmes
    #  all (true)   - call all the callbacks for all check button items regardless of the state
    #  current      - call the callback of the check button item that changes the state (.Select only)
    #  checked      - call all the callbacks for all checked check button items
    #  unchecked    - call all the callbacks for all un-checked check button items
    #
    # -----------------------------------------------------------------------------------------------------------------

    MENU.Create build_menu Build Build DEMO.BuildCallback

    #
    # if there is no alias for the menu you can call it through
    # MENU API directly or create your own alias:
    #
    # > MENU.Show build_menu
    #

    #
    # Demo menu 'Build'
    #
    MENU.AddRadioButton build_menu Debug debug DEMO.BuildModeCallback
    MENU.AddRadioButton build_menu Release release DEMO.BuildModeCallback
    MENU.AddDivider build_menu
    MENU.AddCheckButton build_menu Pedantic Pedant DEMO.BuildGccFlagsCallback
    MENU.AddCheckButton build_menu Wall all DEMO.BuildGccFlagsCallback
    MENU.AddCheckButton build_menu Werror err DEMO.BuildGccFlagsCallback
    MENU.AddCheckButton build_menu fPIC PIC DEMO.BuildGccFlagsCallback
    MENU.AddCheckButton build_menu isoC99 iso DEMO.BuildGccFlagsCallback
    MENU.Select build_menu Debug false
    MENU.Select build_menu Wall false
    MENU.Select build_menu Werror false

    #
    # Demo menu 'LOGS'
    #

    MENU.Create logs_menu LOGS LOGS
    MENU.SetStyle logs_menu default by.largest.item

    MENU.AddRadioButton logs_menu FATAL $null DEMO.LogsCallback
    MENU.AddRadioButton logs_menu SEVERE $null DEMO.LogsCallback
    MENU.AddRadioButton logs_menu WARNING $null DEMO.LogsCallback
    MENU.AddRadioButton logs_menu INFO $null DEMO.LogsCallback
    MENU.AddLnBreak logs_menu
    MENU.AddRadioButton logs_menu FINE $null DEMO.LogsCallback
    MENU.AddRadioButton logs_menu FINER $null DEMO.LogsCallback
    MENU.AddRadioButton logs_menu FINEST $null DEMO.LogsCallback
    MENU.AddRadioButton logs_menu OFF $null DEMO.LogsCallback

    MENU.Select logs_menu INFO false

    MENU._debug_print_all
}

# ---------------------------------------------------------------------------------------------------------------------

alias dev='MENU.ShowAll true'

# Some cool stuf that you can do with the MENU class
alias flip='MENU._separator build_menu true; MENU.CheckButtonForAll build_menu flip true false false all; MENU._separator build_menu true'

DEMO.Create

# Display all the menus and calls all the item's callbacks, which sets the environment,
# controlled by the menus. It's like setting evything up into a default state
MENU.ShowAll true true true all



# ---------------------------------------------------------------------------------------------------------------------
